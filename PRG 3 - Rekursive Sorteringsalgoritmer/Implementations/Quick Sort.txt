// implementation of pseudocode on 
// http://en.wikipedia.org/wiki/Quicksort
// hau
public class Quicksort {

	
	
		// left is the index of the leftmost element of the array
	   	// right is the index of the rightmost element of the array (inclusive)
	   	// number of elements in subarray = right-left+1
	   private static int partition(int[] array, int left, int right, int pivotIndex)
	   {
	      	int pivotValue = array[pivotIndex];
	      	
	      	//swap array['pivotIndex'] and array['right']  // Move pivot to end
	   		int temp 		= array[pivotIndex];
	   		array[pivotIndex] 	= array[right];
	   		array[right] 		= temp;
	   		
	   		int storeIndex  = left;
	      
	   		//for 'i' from 'left' to 'right' - 1  // left = i < right
	      	for (int i = left; i < right; i++) {
	    	  if (  array[i] < pivotValue)
	    	  {
	              //swap array['i'] and array['storeIndex']
	    		  int temp2         = array[i];
	    		  array[i]          = array[storeIndex];
	    		  array[storeIndex] = temp2;
	       		  
	    		  storeIndex = storeIndex + 1;
	    	  }
	     	}  
	      	
	       //swap array['storeIndex'] and array['right']  // Move pivot to its final place
	       int temp3 		= array[storeIndex];
	       array[storeIndex] 	= array[right];
	       array[right] 		= temp3;
	           
	      return storeIndex;
	     }

	
	   public static void quicksort(int[] array, int left, int right)
	   {

		   // If the list has 2 or more items
		   if (left < right)
		   {

			   // See "Choice of pivot" section below for possible choices
			   // choose any 'pivotIndex' such that 'left' = 'pivotIndex' = 'right'
			   int pivotIndex = (right + left)/2;

			   // Get lists of bigger and smaller items and final position of pivot
			   int pivotNewIndex = partition(array, left, right, pivotIndex);
			   

			   // Recursively sort elements smaller than the pivot
			   quicksort(array, left, pivotNewIndex - 1);

			   // Recursively sort elements at least as big as the pivot
			   quicksort(array, pivotNewIndex + 1, right);
		   }
	   }
}

