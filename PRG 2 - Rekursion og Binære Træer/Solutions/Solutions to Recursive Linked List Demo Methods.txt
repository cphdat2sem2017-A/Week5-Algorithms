
public class LinkedList
{
	private Node head;
	
	
	public void LinkedList()
	{
		head = null;
	}
	
	public void insert(int data)
	{
		Node newNode = new Node(data);
		newNode.next = head;
		head 		 = newNode;
	}
	
	
	//-- print in normal order
	public void printList()
	{
		Node currNode = head;
		while (currNode != null)
		{
			System.out.println(currNode.data);
			currNode = currNode.next;
		}
	}
	
	
	//-- print  in reverse order using recursion
	//   this method is called by client
	public void printReverse()
	{
		printReverseRec(head);
	}

	//-- Recursive method
	private void printReverseRec(Node n)
	{
		if (n == null)
			return;
		else
		{
			printReverseRec(n.next);
			System.out.println(n.data);
		}
	}
	//-- search for key
	//   this method is be called by client
	public boolean lookup(int key)
	{
		boolean res = lookupRec(head,key);
		return res;
	}
	// recursive method
	public boolean lookupRec(Node n, int key)
	{
		if (n == null)
			return false;
		else
		{
			if (n.data == key)
				return true;
			else
				return lookupRec(n.next, key);
		}
	}
	//-- count elements
	public int count()
        {
            return countRec(head);
        }
	
	// recursive method
        private int countRec(Node n)
        {
            if (n == null)           // base case
               return 0;
            else
            {
                return 1 + countRec(n.next);
            }
                
        }
	//=======================
	private static class Node
	{
		Node next;
		int data;
	
		Node(int newData) 
		{
			next = null;
			data = newData;
		}
	}
	

	
	
}
